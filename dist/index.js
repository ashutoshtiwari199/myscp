"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.myscp = void 0;
const child_process_1 = require("child_process");
// import path from "path";
const stream_1 = require("stream");
class myscp extends stream_1.EventEmitter {
    constructor(options) {
        super();
        this.options = options;
        this.path = this.options.path;
        this.hostIP = this.options.hostIP;
        this.user = this.options.user;
        this.password = this.options.password;
        this.serverPath = this.options.serverPath;
        this.localDownLoadPath = this.options.localDownLoadPath;
    }
    list(flag) {
        const myprocess = (0, child_process_1.spawn)(`sshpass -p ${this.password} ssh -o ConnectTimeout=${'5'} ${this.user}@${this.hostIP} ls ${flag} ${this.serverPath}`, [], { shell: true });
        myprocess.stdout.on('data', (message) => {
            this.output = message.toString().split('\n');
            this.emit('result', this.output);
            // return this.output;
        });
        myprocess.stderr.on('data', (message) => {
            console.log(`Proccess Exited witb Error: ${message.toString()}`);
            this.output = message.toString().split('\n');
            this.emit('error', this.output);
            // return message.toString().split('\n')
        });
        myprocess.on('exit', (code) => {
            this.emit('exit', code);
        });
    }
    download(filename) {
        const myprocess = (0, child_process_1.spawn)(`sshpass -p ${this.password} scp -o ConnectTimeout=${'5'} ${this.user}@${this.hostIP}:${this.serverPath}/${filename} ${this.localDownLoadPath}`, [], { shell: true });
        myprocess.stdout.on('data', (message) => {
            this.output = message.toString().split('\n');
            this.emit('result', this.output);
        });
        myprocess.stderr.on('data', (message) => {
            console.log(`Proccess Exited witb Error: ${message.toString()}`);
            this.output = message.toString().split('\n');
            this.emit('error', this.output);
        });
        myprocess.on('exit', (code) => {
            this.emit('exit', code);
        });
    }
}
exports.myscp = myscp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaURBQXNDO0FBRXRDLDJCQUEyQjtBQUMzQixtQ0FBc0M7QUFXdEMsTUFBYSxLQUFNLFNBQVEscUJBQVk7SUFVbkMsWUFBb0IsT0FBZ0I7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFEUSxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBRWhDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUMxQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztJQUM1RCxDQUFDO0lBRU0sSUFBSSxDQUFDLElBQWE7UUFDckIsTUFBTSxTQUFTLEdBQUcsSUFBQSxxQkFBSyxFQUFDLGNBQWMsSUFBSSxDQUFDLFFBQVEsMEJBQTBCLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUNqSyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pDLHNCQUFzQjtRQUMxQixDQUFDLENBQUMsQ0FBQTtRQUVGLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0JBQStCLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakUsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyx3Q0FBd0M7UUFDNUMsQ0FBQyxDQUFDLENBQUE7UUFFRixTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLFFBQVEsQ0FBQyxRQUFnQjtRQUM1QixNQUFNLFNBQVMsR0FBRyxJQUFBLHFCQUFLLEVBQUMsY0FBYyxJQUFJLENBQUMsUUFBUSwwQkFBMEIsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUM1TCxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNwQyxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFBO1FBRUYsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFBO1FBRUYsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSjtBQXpERCxzQkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzcGF3biB9IGZyb20gXCJjaGlsZF9wcm9jZXNzXCI7XG5pbXBvcnQgb3MgZnJvbSAnb3MnO1xuLy8gaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJzdHJlYW1cIjtcblxuaW50ZXJmYWNlIG9wdGlvbnMge1xuICAgIHBhdGg6IHN0cmluZztcbiAgICBob3N0SVA6IHN0cmluZztcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBzZXJ2ZXJQYXRoOiBzdHJpbmc7XG4gICAgbG9jYWxEb3duTG9hZFBhdGg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBteXNjcCBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gICAgcHVibGljIG91dHB1dDpBcnJheTxzdHJpbmc+O1xuICAgIHB1YmxpYyBwYXRoOiBzdHJpbmc7XG4gICAgcHVibGljIGhvc3RJUDogc3RyaW5nO1xuICAgIHB1YmxpYyB1c2VyOiBzdHJpbmc7XG4gICAgcHVibGljIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgcHVibGljIHNlcnZlclBhdGg6IHN0cmluZztcbiAgICBwdWJsaWMgbG9jYWxEb3duTG9hZFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICAgIFxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0aW9uczogb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnBhdGggPSB0aGlzLm9wdGlvbnMucGF0aDtcbiAgICAgICAgdGhpcy5ob3N0SVAgPSB0aGlzLm9wdGlvbnMuaG9zdElQO1xuICAgICAgICB0aGlzLnVzZXIgPSB0aGlzLm9wdGlvbnMudXNlcjtcbiAgICAgICAgdGhpcy5wYXNzd29yZCA9IHRoaXMub3B0aW9ucy5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5zZXJ2ZXJQYXRoID0gdGhpcy5vcHRpb25zLnNlcnZlclBhdGg7XG4gICAgICAgIHRoaXMubG9jYWxEb3duTG9hZFBhdGggPSB0aGlzLm9wdGlvbnMubG9jYWxEb3duTG9hZFBhdGg7XG4gICAgfVxuXG4gICAgcHVibGljIGxpc3QoZmxhZz86IHN0cmluZyk6IHZvaWR7XG4gICAgICAgIGNvbnN0IG15cHJvY2VzcyA9IHNwYXduKGBzc2hwYXNzIC1wICR7dGhpcy5wYXNzd29yZH0gc3NoIC1vIENvbm5lY3RUaW1lb3V0PSR7JzUnfSAke3RoaXMudXNlcn1AJHt0aGlzLmhvc3RJUH0gbHMgJHtmbGFnfSAke3RoaXMuc2VydmVyUGF0aH1gLCBbXSwge3NoZWxsOiB0cnVlfSk7XG4gICAgICAgIG15cHJvY2Vzcy5zdGRvdXQub24oJ2RhdGEnLCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vdXRwdXQgPSBtZXNzYWdlLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZXN1bHQnLCB0aGlzLm91dHB1dCk7XG4gICAgICAgICAgICAvLyByZXR1cm4gdGhpcy5vdXRwdXQ7XG4gICAgICAgIH0pXG5cbiAgICAgICAgbXlwcm9jZXNzLnN0ZGVyci5vbignZGF0YScsIChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgUHJvY2Nlc3MgRXhpdGVkIHdpdGIgRXJyb3I6ICR7bWVzc2FnZS50b1N0cmluZygpfWApO1xuICAgICAgICAgICAgdGhpcy5vdXRwdXQgPSBtZXNzYWdlLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIHRoaXMub3V0cHV0KTtcbiAgICAgICAgICAgIC8vIHJldHVybiBtZXNzYWdlLnRvU3RyaW5nKCkuc3BsaXQoJ1xcbicpXG4gICAgICAgIH0pXG5cbiAgICAgICAgbXlwcm9jZXNzLm9uKCdleGl0JywgKGNvZGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXhpdCcsIGNvZGUpO1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1YmxpYyBkb3dubG9hZChmaWxlbmFtZTogc3RyaW5nKXtcbiAgICAgICAgY29uc3QgbXlwcm9jZXNzID0gc3Bhd24oYHNzaHBhc3MgLXAgJHt0aGlzLnBhc3N3b3JkfSBzY3AgLW8gQ29ubmVjdFRpbWVvdXQ9JHsnNSd9ICR7dGhpcy51c2VyfUAke3RoaXMuaG9zdElQfToke3RoaXMuc2VydmVyUGF0aH0vJHtmaWxlbmFtZX0gJHt0aGlzLmxvY2FsRG93bkxvYWRQYXRofWAsIFtdLCB7c2hlbGw6IHRydWV9KTtcbiAgICAgICAgbXlwcm9jZXNzLnN0ZG91dC5vbignZGF0YScsIChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm91dHB1dCA9IG1lc3NhZ2UudG9TdHJpbmcoKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3Jlc3VsdCcsIHRoaXMub3V0cHV0KTtcbiAgICAgICAgfSlcblxuICAgICAgICBteXByb2Nlc3Muc3RkZXJyLm9uKCdkYXRhJywgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBQcm9jY2VzcyBFeGl0ZWQgd2l0YiBFcnJvcjogJHttZXNzYWdlLnRvU3RyaW5nKCl9YCk7XG4gICAgICAgICAgICB0aGlzLm91dHB1dCA9IG1lc3NhZ2UudG9TdHJpbmcoKS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgdGhpcy5vdXRwdXQpO1xuICAgICAgICB9KVxuXG4gICAgICAgIG15cHJvY2Vzcy5vbignZXhpdCcsIChjb2RlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2V4aXQnLCBjb2RlKTtcbiAgICAgICAgfSlcbiAgICB9XG59Il19